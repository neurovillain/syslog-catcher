// Code generated by protoc-gen-go.
// source: catcher.proto
// DO NOT EDIT!

/*
Package catcher is a generated protocol buffer package.

It is generated from these files:
	catcher.proto

It has these top-level messages:
	EventRequest
	Event
*/
package catcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// EventType - recv event type consts.
type EventType int32

const (
	EventType_Unknown        EventType = 0
	EventType_PortUp         EventType = 1
	EventType_PortDown       EventType = 2
	EventType_PortLoopDetect EventType = 3
)

var EventType_name = map[int32]string{
	0: "Unknown",
	1: "PortUp",
	2: "PortDown",
	3: "PortLoopDetect",
}
var EventType_value = map[string]int32{
	"Unknown":        0,
	"PortUp":         1,
	"PortDown":       2,
	"PortLoopDetect": 3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// PortSpeed - ethernet port speed consts.
type PortSpeed int32

const (
	PortSpeed_UnknownSpeed PortSpeed = 0
	PortSpeed_Speed100Mb   PortSpeed = 1
	PortSpeed_Speed10Mb    PortSpeed = 2
	PortSpeed_Speed1Gb     PortSpeed = 3
)

var PortSpeed_name = map[int32]string{
	0: "UnknownSpeed",
	1: "Speed100Mb",
	2: "Speed10Mb",
	3: "Speed1Gb",
}
var PortSpeed_value = map[string]int32{
	"UnknownSpeed": 0,
	"Speed100Mb":   1,
	"Speed10Mb":    2,
	"Speed1Gb":     3,
}

func (x PortSpeed) String() string {
	return proto.EnumName(PortSpeed_name, int32(x))
}
func (PortSpeed) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// PortDuplex - ethernet port duplex consts.
type PortDuplex int32

const (
	PortDuplex_UnknownDuplex PortDuplex = 0
	PortDuplex_Full          PortDuplex = 1
	PortDuplex_Half          PortDuplex = 2
)

var PortDuplex_name = map[int32]string{
	0: "UnknownDuplex",
	1: "Full",
	2: "Half",
}
var PortDuplex_value = map[string]int32{
	"UnknownDuplex": 0,
	"Full":          1,
	"Half":          2,
}

func (x PortDuplex) String() string {
	return proto.EnumName(PortDuplex_name, int32(x))
}
func (PortDuplex) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// EventRequest - subscription parameters.
type EventRequest struct {
	ClientName string      `protobuf:"bytes,1,opt,name=ClientName,json=clientName" json:"ClientName,omitempty"`
	Events     []EventType `protobuf:"varint,2,rep,packed,name=Events,json=events,enum=catcher.EventType" json:"Events,omitempty"`
	Nets       []string    `protobuf:"bytes,3,rep,name=Nets,json=nets" json:"Nets,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *EventRequest) GetEvents() []EventType {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventRequest) GetNets() []string {
	if m != nil {
		return m.Nets
	}
	return nil
}

// Event - parsed syslog event.
type Event struct {
	Type   EventType  `protobuf:"varint,1,opt,name=Type,json=type,enum=catcher.EventType" json:"Type,omitempty"`
	Host   string     `protobuf:"bytes,2,opt,name=Host,json=host" json:"Host,omitempty"`
	Port   uint32     `protobuf:"varint,3,opt,name=Port,json=port" json:"Port,omitempty"`
	Speed  PortSpeed  `protobuf:"varint,4,opt,name=Speed,json=speed,enum=catcher.PortSpeed" json:"Speed,omitempty"`
	Duplex PortDuplex `protobuf:"varint,5,opt,name=Duplex,json=duplex,enum=catcher.PortDuplex" json:"Duplex,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_Unknown
}

func (m *Event) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Event) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Event) GetSpeed() PortSpeed {
	if m != nil {
		return m.Speed
	}
	return PortSpeed_UnknownSpeed
}

func (m *Event) GetDuplex() PortDuplex {
	if m != nil {
		return m.Duplex
	}
	return PortDuplex_UnknownDuplex
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "catcher.EventRequest")
	proto.RegisterType((*Event)(nil), "catcher.Event")
	proto.RegisterEnum("catcher.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("catcher.PortSpeed", PortSpeed_name, PortSpeed_value)
	proto.RegisterEnum("catcher.PortDuplex", PortDuplex_name, PortDuplex_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SyslogCatcher service

type SyslogCatcherClient interface {
	// Events - subsribe to event stream of specified events.
	Events(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (SyslogCatcher_EventsClient, error)
}

type syslogCatcherClient struct {
	cc *grpc.ClientConn
}

func NewSyslogCatcherClient(cc *grpc.ClientConn) SyslogCatcherClient {
	return &syslogCatcherClient{cc}
}

func (c *syslogCatcherClient) Events(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (SyslogCatcher_EventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SyslogCatcher_serviceDesc.Streams[0], c.cc, "/catcher.SyslogCatcher/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &syslogCatcherEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SyslogCatcher_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type syslogCatcherEventsClient struct {
	grpc.ClientStream
}

func (x *syslogCatcherEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SyslogCatcher service

type SyslogCatcherServer interface {
	// Events - subsribe to event stream of specified events.
	Events(*EventRequest, SyslogCatcher_EventsServer) error
}

func RegisterSyslogCatcherServer(s *grpc.Server, srv SyslogCatcherServer) {
	s.RegisterService(&_SyslogCatcher_serviceDesc, srv)
}

func _SyslogCatcher_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyslogCatcherServer).Events(m, &syslogCatcherEventsServer{stream})
}

type SyslogCatcher_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type syslogCatcherEventsServer struct {
	grpc.ServerStream
}

func (x *syslogCatcherEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _SyslogCatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "catcher.SyslogCatcher",
	HandlerType: (*SyslogCatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _SyslogCatcher_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "catcher.proto",
}

func init() { proto.RegisterFile("catcher.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xe1, 0x8e, 0x93, 0x40,
	0x14, 0x85, 0x3b, 0x30, 0xb0, 0xcb, 0xb5, 0x90, 0xf1, 0x1a, 0x13, 0xe2, 0x0f, 0x43, 0xf6, 0x87,
	0x21, 0x98, 0x6c, 0xba, 0xbb, 0x6f, 0x60, 0x6b, 0x6d, 0x8c, 0x6d, 0x0c, 0xb5, 0x0f, 0x50, 0xe8,
	0xd5, 0x1a, 0x91, 0x19, 0x99, 0xa9, 0xda, 0x97, 0xf2, 0x19, 0xcd, 0x0c, 0xb4, 0xa6, 0x66, 0x7f,
	0xcd, 0x9c, 0x73, 0x3f, 0x0e, 0x07, 0x66, 0x20, 0xae, 0xb7, 0xa6, 0xde, 0x53, 0x77, 0xab, 0x3a,
	0x69, 0x24, 0x5e, 0x0d, 0xf2, 0xa6, 0x85, 0xf1, 0xdb, 0x9f, 0xd4, 0x9a, 0x92, 0x7e, 0x1c, 0x48,
	0x1b, 0x7c, 0x09, 0x30, 0x6d, 0xbe, 0x52, 0x6b, 0x56, 0xdb, 0xef, 0x94, 0xb2, 0x8c, 0xe5, 0x51,
	0x09, 0xf5, 0xd9, 0xc1, 0x02, 0x42, 0xc7, 0xeb, 0xd4, 0xcb, 0xfc, 0x3c, 0xb9, 0xc7, 0xdb, 0x53,
	0xb0, 0xb3, 0x3f, 0x1d, 0x15, 0x95, 0x21, 0x39, 0x02, 0x11, 0xf8, 0x8a, 0x8c, 0x4e, 0xfd, 0xcc,
	0xcf, 0xa3, 0x92, 0xb7, 0x64, 0xf4, 0xcd, 0x1f, 0x06, 0x81, 0x23, 0xf1, 0x15, 0x70, 0x4b, 0xbb,
	0x77, 0x3c, 0x9e, 0xc3, 0xcd, 0x51, 0x91, 0x4d, 0x59, 0x48, 0x6d, 0x52, 0xcf, 0x75, 0xe1, 0x7b,
	0xa9, 0x8d, 0xf5, 0x3e, 0xca, 0xce, 0xa4, 0x7e, 0xc6, 0xf2, 0xb8, 0xe4, 0x4a, 0x76, 0x06, 0x73,
	0x08, 0xd6, 0x8a, 0x68, 0x97, 0xf2, 0xff, 0x02, 0x2d, 0xe9, 0x26, 0x65, 0xa0, 0xed, 0x82, 0xaf,
	0x21, 0x9c, 0x1d, 0x54, 0x43, 0xbf, 0xd3, 0xc0, 0xa1, 0xcf, 0x2e, 0xd0, 0x7e, 0x54, 0x86, 0x3b,
	0xb7, 0x16, 0x73, 0x88, 0xce, 0x8d, 0xf0, 0x09, 0x5c, 0x6d, 0xda, 0x6f, 0xad, 0xfc, 0xd5, 0x8a,
	0x11, 0x02, 0x84, 0x96, 0xdf, 0x28, 0xc1, 0x70, 0x0c, 0xd7, 0xee, 0x59, 0x3b, 0xf1, 0x10, 0x21,
	0xb1, 0xea, 0x83, 0x94, 0x6a, 0x46, 0x86, 0x6a, 0x23, 0xfc, 0xe2, 0x3d, 0x44, 0xe7, 0x22, 0x28,
	0x60, 0x3c, 0xe4, 0x38, 0x2d, 0x46, 0x98, 0x00, 0xb8, 0xed, 0xdd, 0x64, 0xb2, 0xac, 0x04, 0xc3,
	0x18, 0xa2, 0x41, 0x2f, 0x2b, 0xe1, 0xd9, 0xfc, 0x5e, 0xbe, 0xab, 0x84, 0x5f, 0x3c, 0x00, 0xfc,
	0x6b, 0x8a, 0x4f, 0x21, 0x1e, 0xc2, 0x7a, 0x43, 0x8c, 0xf0, 0x1a, 0xf8, 0xfc, 0xd0, 0x34, 0x82,
	0xd9, 0xdd, 0x62, 0xdb, 0x7c, 0x16, 0xde, 0xfd, 0x1b, 0x88, 0xd7, 0x47, 0xdd, 0xc8, 0x2f, 0xd3,
	0xfe, 0x63, 0xf1, 0xee, 0x74, 0x94, 0xf8, 0xfc, 0xf2, 0xe7, 0x0f, 0x77, 0xe1, 0x45, 0x72, 0x69,
	0x4f, 0x58, 0x15, 0xba, 0xdb, 0xf3, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xa6, 0xc0, 0xbc,
	0x4e, 0x02, 0x00, 0x00,
}
